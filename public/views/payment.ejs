<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Final Project</title>

    <!-- LINK TO BOOTSTRAP  AND STYLESHEET -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"> 
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.min.js" integrity="sha384-Atwg2Pkwv9vp0ygtn1JAojH0nYbwNJLPhwyoVbhoPwBhjQPR5VtM2+xf0Uwh9KtT" crossorigin="anonymous"></script>
    <link href="/css/style.css" rel="stylesheet">

    <!-- NAVBAR -->
    <%- include('partials/navbarmini') %>

</head>
<body>
<!-- RESERVATION FORM 2005-->
<section class="reservations" id="reservations">
    <br><br><br>
    <div class="title">
      <h1 class="text-center">Payment Gateway to develop</h1>
      <br>
      <div class="reservations-container" id="reservationDetails">

              <h1 class="text-center">Thank you. Please find your order below</h1>
              <table id="ordersTable" class="table">
                <thead>
                  <tr>
                    <th scope="col">Menu Section</th>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Unit Price</th>
                    <th scope="col">Quantity</th>
                  </tr>
                </thead>
                <tbody>
                <!-- Orders will be inserted here -->
                </tbody>
              </table>
              <div class="total" id="total"></div>

            </div>
          </form>
      </div>
    </div>
  </section>    
  <br><br><br><br>
      <!-- footer here -->        
      <div class="footer">
        <p>L.Liu @2023</p>
      </div>
        <script src="/js/resascript.js"></script>
        <script src="/js/commonscript.js"></script>
        <script src="/js/menuscript.js"></script>
        <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
        <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
        <script>
        let username;
        let id='order';

      //   function updateOrder(element, itemno, price, remove) {
      //         const newQuantity = parseInt(element.value);
      //         let orders = JSON.parse(localStorage.getItem('orders')) || {};
      //         orders[itemno] = { quantity: newQuantity, price: price };
      //         localStorage.setItem('orders', JSON.stringify(orders));
      //   }

      //   document.addEventListener('DOMContentLoaded', (event) => {
      //         // Function to update the quantity in local storage
      //         function updateQuantityInLocalStorage(newQuantity, itemno, price, remove = false) {
      //               const orders = JSON.parse(localStorage.getItem('orders')) || {};
      //               if (remove) {
      //                     delete orders[itemno];
      //               } else {
      //                     orders[itemno] = { quantity: parseInt(newQuantity.value), price: price };
      //               }
      //               localStorage.setItem('orders', JSON.stringify(orders));
      //         }

              // Function to fetch item details from the database
              async function fetchItemDetails(itemId) {
                    const response = await fetch(`https://projectbackend-fndm.onrender.com/items/${itemId}`);
                    const data = await response.json();
                    if (data.success && data.customer) {
                          return data.customer;
                    } else {
                          console.error('Unexpected response structure:', data);
                          return null;
                    }
              }

              // Function to display orders
              async function displayOrders() {
                    const ordersTableBody = document.querySelector('#ordersTable tbody');
                    const orders = JSON.parse(localStorage.getItem('orders')) || {};
                    ordersTableBody.innerHTML = '';
                    const itemsDetails = await Promise.all(Object.keys(orders).map(fetchItemDetails));
                    let total = 0;
                    const orderDetails = await Promise.all(
                          Object.keys(orders).map(async (itemId) => {
                                const details = await fetchItemDetails(itemId);
                                const quantity = orders[itemId].quantity;
                                total += quantity * details.price; // Calculate total
                                return { ...details, quantity: quantity, price: orders[itemId].price };
                          })
                    );
                    const groupOrder = ['Drinks', 'Starters', 'Main Course', 'Desserts'];
                    const sortedItems = orderDetails.sort((a, b) => {
                          return groupOrder.indexOf(a.group) - groupOrder.indexOf(b.group);
                    });

                    sortedItems.forEach((orderDetails) => {
                          if (orderDetails) {
                                const orderRow = document.createElement('tr');
                                orderRow.innerHTML = `
                                <td>${orderDetails.group || 'Group not available'}</td>
                                <td>${orderDetails.itemname || 'Name not available'}</td>
                                <td>${orderDetails.description || ' '}</td>
                                <td>${orderDetails.price ? `Rs${orderDetails.price}` : 'Price not available'}</td>
                                <td>${orderDetails.quantity || 0}</td>
                                `;
                                ordersTableBody.appendChild(orderRow);
                          }
                    });
                  //   <input class="quantity-input" type="number" id="${orderDetails.itemno}" name="quantity" data-price="${orderDetails.price}" value="${orderDetails.quantity || 0}" min="0" onchange="updateOrder(this, ${orderDetails.itemno}, ${orderDetails.price})">
                    
                    document.getElementById('total').innerHTML = `<strong>Total amount: Rs ${total.toFixed(2)}</strong>`;
              }

            //   // Function to add event listeners to all quantity input fields
            //   function addQuantityInputEventListeners() {
            //         document.querySelectorAll('.quantity-input').forEach(input => {
            //               input.addEventListener('change', (event) => {
            //                     const itemno = event.target.getAttribute('id');
            //                     const price = parseInt(event.target.getAttribute('data-price'));
            //                     updateOrder(event.target, itemno, price);
            //                     updateTotal();
            //               });
            //         });
            //   }

            //   function updateTotal() {
            //         const quantityInputs = document.querySelectorAll('.quantity-input');
            //         let total = 0;
            //         quantityInputs.forEach(input => {
            //               const price = parseFloat(input.getAttribute('data-price'));
            //               const quantity = parseInt(input.value);

            //               // If the quantity and price are valid numbers, add to the total
            //               if (!isNaN(price) && !isNaN(quantity)) {
            //                     total += price * quantity;
            //               }
            //         });
            //         // Update the total in the DOM
            //         const totalElement = document.getElementById('total');
            //         totalElement.innerHTML = `<strong>Total amount: Rs ${total.toFixed(2)}</strong>`;
            //   }

              // Call the function to display orders and then add event listeners
            //   displayOrders().then(() => {
            //         addQuantityInputEventListeners();
            //   });

                  displayOrders()
              // Function to save form data to local storage
              function saveFormData(formData) {
                    localStorage.setItem('myResaData', JSON.stringify(formData));
              }

              // Function to update the database with reservation and orders
            //   async function updateDatabase() {
            //         const reservationData = JSON.parse(localStorage.getItem('myResaData')) || {};
            //         const ordersObject = JSON.parse(localStorage.getItem('orders')) || {};
            //         // Convert orders object to an array of order items
            //         const ordersData = Object.entries(ordersObject).map(([itemno, orderDetails]) => ({
            //               itemno: itemno,
            //               quantity: orderDetails.quantity,
            //               price: orderDetails.price
            //         }));
            //         const combinedData = {
            //               ...reservationData,
            //               orders: ordersData
            //         };
            //         try {
            //               const response = await fetch('https://projectbackend-fndm.onrender.com/reservation/create', {
            //                     method: 'POST',
            //                     headers: {
            //                           'Content-Type': 'application/json',
            //                     },
            //                     body: JSON.stringify(combinedData),
            //               });
            //               if (response.ok) {
            //                     window.location.href = '/payment';
            //               } else {
            //                     console.error('Failed to update the database.');
            //               }
            //         } catch (error) {
            //               console.error('Error:', error);
            //         }
            //   }

              // Add click event listener to the checkout button
            //   const checkoutButton = document.querySelector('.btn-outline-primary');
            //   checkoutButton.addEventListener('click', (e) => {
            //         e.preventDefault(); 
            //         updateDatabase(); 
            //   });
      //   });

    </script>
</body>
</html>
